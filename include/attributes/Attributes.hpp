/***************************************************************************
* Copyright (c) 2017, Nico Caprioli                                        *
*                                                                          *
* Distributed under the terms of the LGPLv3 License.                       *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/
#pragma once
#ifndef WEB_BINARY_COMPRESSION_ATTRIBUTES_ATTRIBUTES_H
#define WEB_BINARY_COMPRESSION_ATTRIBUTES_ATTRIBUTES_H
#include <memory>
#include <string_view>
#include <unordered_map>
#include "NumericLiterals.hpp"

namespace WebBinaryCompression::Attributes {
using namespace std::string_view_literals;
/**
 * \brief Maps all \link Attribute \endlink names to their equivalent.
 */
const std::unordered_map<std::string_view, std::shared_ptr<Attribute>,
                         AttributeHasher> elements = {
  {
    "accept"sv,
    std::make_shared<Attribute>(0x06_uint8)
  },
  {
    "accept-charset"sv,
    std::make_shared<Attribute>(0x07_uint8)
  },
  {
    "accesskey"sv,
    std::make_shared<Attribute>(0x08_uint8)
  },
  {
    "action"sv,
    std::make_shared<Attribute>(0x09_uint8)
  },
  {
    "alt"sv,
    std::make_shared<Attribute>(0x0A_uint8)
  },
  {
    "async"sv,
    std::make_shared<Attribute>(0x0B_uint8)
  },
  {
    "autocomplete"sv,
    std::make_shared<Attribute>(0x0C_uint8)
  },
  {
    "autofocus"sv,
    std::make_shared<Attribute>(0x0D_uint8)
  },
  {
    "autoplay"sv,
    std::make_shared<Attribute>(0x0E_uint8)
  },
  {
    "capture"sv,
    std::make_shared<Attribute>(0x0F_uint8)
  },
  {
    "charset"sv,
    std::make_shared<Attribute>(0x10_uint8)
  },
  {
    "checked"sv,
    std::make_shared<Attribute>(0x11_uint8)
  },
  {
    "cite"sv,
    std::make_shared<Attribute>(0x12_uint8)
  },
  {
    "class"sv,
    std::make_shared<Attribute>(0x13_uint8)
  },
  {
    "cols"sv,
    std::make_shared<Attribute>(0x14_uint8)
  },
  {
    "colspan"sv,
    std::make_shared<Attribute>(0x15_uint8)
  },
  {
    "command"sv,
    std::make_shared<Attribute>(0x16_uint8)
  },
  {
    "content"sv,
    std::make_shared<Attribute>(0x17_uint8)
  },
  {
    "contenteditable"sv,
    std::make_shared<Attribute>(0x18_uint8)
  },
  {
    "contextmenu"sv,
    std::make_shared<Attribute>(0x19_uint8)
  },
  {
    "controls"sv,
    std::make_shared<Attribute>(0x1A_uint8)
  },
  {
    "coords"sv,
    std::make_shared<Attribute>(0x1B_uint8)
  },
  {
    "crossorigin"sv,
    std::make_shared<Attribute>(0x1C_uint8)
  },
  {
    "data"sv,
    std::make_shared<Attribute>(0x1D_uint8)
  },
  {
    "datetime"sv,
    std::make_shared<Attribute>(0x1E_uint8)
  },
  {
    "default"sv,
    std::make_shared<Attribute>(0x1F_uint8)
  },
  {
    "defer"sv,
    std::make_shared<Attribute>(0x20_uint8)
  },
  {
    "dir"sv,
    std::make_shared<Attribute>(0x21_uint8)
  },
  {
    "disabled"sv,
    std::make_shared<Attribute>(0x22_uint8)
  },
  {
    "download"sv,
    std::make_shared<Attribute>(0x23_uint8)
  },
  {
    "draggable"sv,
    std::make_shared<Attribute>(0x24_uint8)
  },
  {
    "dropzone"sv,
    std::make_shared<Attribute>(0x25_uint8)
  },
  {
    "enctype"sv,
    std::make_shared<Attribute>(0x26_uint8)
  },
  {
    "for"sv,
    std::make_shared<Attribute>(0x27_uint8)
  },
  {
    "form"sv,
    std::make_shared<Attribute>(0x28_uint8)
  },
  {
    "formaction"sv,
    std::make_shared<Attribute>(0x29_uint8)
  },
  {
    "formenctype"sv,
    std::make_shared<Attribute>(0x2A_uint8)
  },
  {
    "formmethod"sv,
    std::make_shared<Attribute>(0x2B_uint8)
  },
  {
    "formnovalidate"sv,
    std::make_shared<Attribute>(0x2C_uint8)
  },
  {
    "formtarget"sv,
    std::make_shared<Attribute>(0x2D_uint8)
  },
  {
    "headers"sv,
    std::make_shared<Attribute>(0x2E_uint8)
  },
  {
    "height"sv,
    std::make_shared<Attribute>(0x2F_uint8)
  },
  {
    "hidden"sv,
    std::make_shared<Attribute>(0x30_uint8)
  },
  {
    "high"sv,
    std::make_shared<Attribute>(0x31_uint8)
  },
  {
    "href"sv,
    std::make_shared<Attribute>(0x32_uint8)
  },
  {
    "hreflang"sv,
    std::make_shared<Attribute>(0x33_uint8)
  },
  {
    "http-equiv"sv,
    std::make_shared<Attribute>(0x34_uint8)
  },
  {
    "icon"sv,
    std::make_shared<Attribute>(0x35_uint8)
  },
  {
    "id"sv,
    std::make_shared<Attribute>(0x36_uint8)
  },
  {
    "inputmode"sv,
    std::make_shared<Attribute>(0x37_uint8)
  },
  {
    "integrity"sv,
    std::make_shared<Attribute>(0x38_uint8)
  },
  {
    "ismap"sv,
    std::make_shared<Attribute>(0x39_uint8)
  },
  {
    "itemid"sv,
    std::make_shared<Attribute>(0x3A_uint8)
  },
  {
    "itemprop"sv,
    std::make_shared<Attribute>(0x3B_uint8)
  },
  {
    "itemref"sv,
    std::make_shared<Attribute>(0x3C_uint8)
  },
  {
    "itemscope"sv,
    std::make_shared<Attribute>(0x3D_uint8)
  },
  {
    "itemtype"sv,
    std::make_shared<Attribute>(0x3E_uint8)
  },
  {
    "kind"sv,
    std::make_shared<Attribute>(0x3F_uint8)
  },
  {
    "label"sv,
    std::make_shared<Attribute>(0x40_uint8)
  },
  {
    "lang"sv,
    std::make_shared<Attribute>(0x41_uint8)
  },
  {
    "list"sv,
    std::make_shared<Attribute>(0x42_uint8)
  },
  {
    "longdesc"sv,
    std::make_shared<Attribute>(0x43_uint8)
  },
  {
    "loop"sv,
    std::make_shared<Attribute>(0x44_uint8)
  },
  {
    "low"sv,
    std::make_shared<Attribute>(0x45_uint8)
  },
  {
    "max"sv,
    std::make_shared<Attribute>(0x46_uint8)
  },
  {
    "maxlength"sv,
    std::make_shared<Attribute>(0x47_uint8)
  },
  {
    "media"sv,
    std::make_shared<Attribute>(0x48_uint8)
  },
  {
    "method"sv,
    std::make_shared<Attribute>(0x49_uint8)
  },
  {
    "min"sv,
    std::make_shared<Attribute>(0x4A_uint8)
  },
  {
    "minlength"sv,
    std::make_shared<Attribute>(0x4B_uint8)
  },
  {
    "multiple"sv,
    std::make_shared<Attribute>(0x4C_uint8)
  },
  {
    "muted"sv,
    std::make_shared<Attribute>(0x4D_uint8)
  },
  {
    "name"sv,
    std::make_shared<Attribute>(0x4E_uint8)
  },
  {
    "novalidate"sv,
    std::make_shared<Attribute>(0x4F_uint8)
  },
  {
    "open"sv,
    std::make_shared<Attribute>(0x50_uint8)
  },
  {
    "optimum"sv,
    std::make_shared<Attribute>(0x51_uint8)
  },
  {
    "pattern"sv,
    std::make_shared<Attribute>(0x52_uint8)
  },
  {
    "placeholder"sv,
    std::make_shared<Attribute>(0x53_uint8)
  },
  {
    "poster"sv,
    std::make_shared<Attribute>(0x54_uint8)
  },
  {
    "preload"sv,
    std::make_shared<Attribute>(0x55_uint8)
  },
  {
    "radiogroup"sv,
    std::make_shared<Attribute>(0x56_uint8)
  },
  {
    "readonly"sv,
    std::make_shared<Attribute>(0x57_uint8)
  },
  {
    "referrerpolicy"sv,
    std::make_shared<Attribute>(0x58_uint8)
  },
  {
    "rel"sv,
    std::make_shared<Attribute>(0x59_uint8)
  },
  {
    "required"sv,
    std::make_shared<Attribute>(0x5A_uint8)
  },
  {
    "reversed"sv,
    std::make_shared<Attribute>(0x5B_uint8)
  },
  {
    "rows"sv,
    std::make_shared<Attribute>(0x5C_uint8)
  },
  {
    "rowspan"sv,
    std::make_shared<Attribute>(0x5D_uint8)
  },
  {
    "scope"sv,
    std::make_shared<Attribute>(0x5E_uint8)
  },
  {
    "selected"sv,
    std::make_shared<Attribute>(0x5F_uint8)
  },
  {
    "selectionDirection"sv,
    std::make_shared<Attribute>(0x60_uint8)
  },
  {
    "selectionEnd"sv,
    std::make_shared<Attribute>(0x61_uint8)
  },
  {
    "selectionStart"sv,
    std::make_shared<Attribute>(0x62_uint8)
  },
  {
    "shape"sv,
    std::make_shared<Attribute>(0x63_uint8)
  },
  {
    "size"sv,
    std::make_shared<Attribute>(0x64_uint8)
  },
  {
    "sizes"sv,
    std::make_shared<Attribute>(0x65_uint8)
  },
  {
    "sizes "sv,
    std::make_shared<Attribute>(0x66_uint8)
  },
  {
    "span"sv,
    std::make_shared<Attribute>(0x67_uint8)
  },
  {
    "spellcheck"sv,
    std::make_shared<Attribute>(0x68_uint8)
  },
  {
    "src"sv,
    std::make_shared<Attribute>(0x69_uint8)
  },
  {
    "srclang"sv,
    std::make_shared<Attribute>(0x6A_uint8)
  },
  {
    "srcset"sv,
    std::make_shared<Attribute>(0x6B_uint8)
  },
  {
    "start"sv,
    std::make_shared<Attribute>(0x6C_uint8)
  },
  {
    "step"sv,
    std::make_shared<Attribute>(0x6D_uint8)
  },
  {
    "style"sv,
    std::make_shared<Attribute>(0x6E_uint8)
  },
  {
    "tabindex"sv,
    std::make_shared<Attribute>(0x6F_uint8)
  },
  {
    "target"sv,
    std::make_shared<Attribute>(0x70_uint8)
  },
  {
    "text"sv,
    std::make_shared<Attribute>(0x71_uint8)
  },
  {
    "title"sv,
    std::make_shared<Attribute>(0x72_uint8)
  },
  {
    "translate"sv,
    std::make_shared<Attribute>(0x73_uint8)
  },
  {
    "type"sv,
    std::make_shared<Attribute>(0x74_uint8)
  },
  {
    "type "sv,
    std::make_shared<Attribute>(0x75_uint8)
  },
  {
    "typemustmatch"sv,
    std::make_shared<Attribute>(0x76_uint8)
  },
  {
    "usemap"sv,
    std::make_shared<Attribute>(0x77_uint8)
  },
  {
    "value"sv,
    std::make_shared<Attribute>(0x78_uint8)
  },
  {
    "volume"sv,
    std::make_shared<Attribute>(0x79_uint8)
  },
  {
    "width"sv,
    std::make_shared<Attribute>(0x7A_uint8)
  },
  {
    "wrap"sv,
    std::make_shared<Attribute>(0x7B_uint8)
  },
  {
    "xmlns"sv,
    std::make_shared<Attribute>(0x7C_uint8)
  },
};
}  // namespace WebBinaryCompression::Attributes
#endif
